# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: rikarazome
app: unitemate-v2
service: unitemate-v2

# 環境別設定
# デプロイ時: serverless deploy --stage dev または --stage prod
# 環境変数は .env.dev または .env.prod から読み込まれる

provider:
  name: aws
  region: ap-northeast-1
  runtime: python3.12
  stackName: ${sls:stage}-${self:service}-stack
  timeout: 10          # 25→10秒に削減（60%削減）
  memorySize: 256      # デフォルト1024MB→256MBに削減（75%削減）
  # deploymentBucket:
  #   name: juv-shun.sls-deployment-store
  #   maxPreviousDeploymentArtifacts: 3
  logRetentionInDays: 3  # 7→3日に削減（CloudWatchコスト削減）
  endpointType: REGIONAL
  websocketsApiName: ${self:service}-websockets-${sls:stage}
  websocketsApiRouteSelectionExpression: $request.body.action
  httpApi:
    cors:
      allowedOrigins:
        - "http://localhost:5173"
        - "http://localhost:5174"
        - "https://unitemate-v2-git-dev-rikarazomes-projects.vercel.app"
        - "https://unitemate-v2-iota.vercel.app"
        - "https://unitemate.com"
        - "https://www.unitemate.com"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
    authorizers:
      authHandler:
        type: request
        functionName: authHandler
        identitySource:
          - $request.header.Authorization
        resultTtlInSeconds: 300
        enableSimpleResponses: true
  iam:
    role:
      name: ${self:service}-role-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !Join ["", [!GetAtt UsersTable.Arn, "/index/*"]]
            - !GetAtt MatchesTable.Arn
            - !Join ["", [!GetAtt MatchesTable.Arn, "/index/*"]]
            - !GetAtt RecordsTable.Arn
            - !Join ["", [!GetAtt RecordsTable.Arn, "/index/*"]]
            - !GetAtt QueueTable.Arn
            - !Join ["", [!GetAtt QueueTable.Arn, "/index/*"]]
            - !GetAtt MasterDataTable.Arn
            - !Join ["", [!GetAtt MasterDataTable.Arn, "/index/*"]]
            - !GetAtt ConnectionsTable.Arn
            - !Join ["", [!GetAtt ConnectionsTable.Arn, "/index/*"]]
            - !GetAtt RankingsTable.Arn
            - !Join ["", [!GetAtt RankingsTable.Arn, "/index/*"]]
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - arn:aws:execute-api:${aws:region}:${aws:accountId}:*/*/*

# デプロイパッケージに含めるファイルのパターン
package:
  patterns:
    - "!.git/**"
    - "!node_modules/**"
    - "!build/**"
    - "!*.log"
    - "!src/**/*.egg-info/**"
    - "!uv.lock"
    - "!pyproject.toml"
    - "!package*.json"
    - "!Makefile"
    - "!migrations/**"
    - "!.pytest_cache/**"
    - "!__pycache__/**"
    - "!*.pyc"
    - "!.mypy_cache/**"
    - "!.ruff_cache/**"
    - "!.dynamodb/**"
    - "!.serverless/**"
    - "!.venv/**"
    - "!.env.sample"

functions:
  # オーソライザー関数
  authHandler:
    handler: src/handlers/auth.authorize
    memorySize: 512      # 中量関数：外部API呼び出しあり
    timeout: 15
    environment:
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}
      USERS_TABLE_NAME: ${self:custom.tableName.users}

  getMe:
    handler: src/handlers/users.get_me
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/me
          method: get
          authorizer:
            name: authHandler

  # テスト用エンドポイント（認証なし）
  testMe:
    handler: src/handlers/users.get_me
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/test/me
          method: get

  # ダミーユーザーリスト取得（認証なし）
  getDummyUsers:
    handler: src/handlers/dummy_auth.get_dummy_users_list
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/auth/dummy/users
          method: get

  # ダミーユーザーログイン（認証なし）
  dummyLogin:
    handler: src/handlers/dummy_auth.dummy_login
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      DUMMY_JWT_SECRET: ${env:DUMMY_JWT_SECRET, 'dummy-secret-for-testing-only'}
    events:
      - httpApi:
          path: /api/auth/dummy/login
          method: post

  # デバッグ用キューエンドポイント（認証なし）
  # マッチメイク関数
  matchMake:
    handler: src/handlers/matchmaking.match_make
    name: ${self:service}-${sls:stage}-match-make
    memorySize: 1024     # 重量関数：複雑なマッチング処理
    timeout: 25
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
      RANKINGS_TABLE_NAME: ${self:custom.tableName.rankings}
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
      DISCORD_WEBHOOK_URL: ${env:DISCORD_WEBHOOK_URL, 'https://discord.com/api/webhooks/1185019044391305226/NbOT6mnrZNHS61T5ro7iu2smxyhhSPH_tecLnWmZ91kup96-mtpdcGwvvo3kjmyzR96_'}

  # マッチ結果処理関数（手動実行用として保持、自動スケジューラーは削除）
  matchJudge:
    handler: src/handlers/match_judge.gather_match
    name: ${self:service}-${sls:stage}-gather-match
    memorySize: 1024     # 重量関数：マッチ結果処理
    timeout: 25
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    # スケジューラーを削除：統合処理（processMatchmaking）に集約

  debugQueueStatus:
    handler: src/handlers/queue.debug_queue_status
    memorySize: 256
    timeout: 10
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/debug/queue
          method: get

  createUser:
    handler: src/handlers/users.create_user
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users
          method: post
          authorizer:
            name: authHandler

  debugAuthInfo:
    handler: src/handlers/users.debug_auth_info
    memorySize: 256
    timeout: 10
    events:
      - httpApi:
          path: /api/debug/auth
          method: post
          authorizer:
            name: authHandler

  updateProfile:
    handler: src/handlers/users.update_profile
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/me/profile
          method: put
          authorizer:
            name: authHandler

  updateDiscordInfo:
    handler: src/handlers/users.update_discord_info
    memorySize: 512
    timeout: 15
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/me/discord
          method: put
          authorizer:
            name: authHandler

  getUser:
    handler: src/handlers/users.get_user
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/{userId}
          method: get
          authorizer:
            name: authHandler

  checkDiscordMembership:
    handler: src/handlers/discord_check.lambda_handler
    memorySize: 512
    timeout: 15
    environment:
      DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${env:DISCORD_GUILD_ID}
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}
    events:
      - httpApi:
          path: /api/discord/check-membership
          method: get
          authorizer:
            name: authHandler

  getUserRanking:
    handler: src/handlers/users.get_user_ranking
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RANKINGS_TABLE_NAME: ${self:custom.tableName.rankings}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/ranking
          method: get
          authorizer:
            name: authHandler
      # パブリック版（認証不要）
      - httpApi:
          path: /api/public/ranking
          method: get

  getUserBadges:
    handler: src/handlers/badges.get_user_badges
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/users/me/badges
          method: get
          authorizer:
            name: authHandler

  equipBadges:
    handler: src/handlers/badges.equip_badges
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/users/me/badges/equip
          method: put
          authorizer:
            name: authHandler

  getMasterData:
    handler: src/handlers/master.get_master_data
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/master
          method: get
          authorizer:
            name: authHandler

  getPublicMasterData:
    handler: src/handlers/master.get_public_master_data
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/public/master
          method: get

  updateSetting:
    handler: src/handlers/master.update_setting
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/master/settings
          method: put
          authorizer:
            name: authHandler

  # Match関連のエンドポイント
  getMatch:
    handler: src/handlers/matches.get_match
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches/{matchId}
          method: get
          authorizer:
            name: authHandler

  getRecentMatches:
    handler: src/handlers/matches.get_recent_matches
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches
          method: get
          authorizer:
            name: authHandler

  getUserMatches:
    handler: src/handlers/matches.get_user_matches
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/users/{userId}/matches
          method: get
          authorizer:
            name: authHandler

  getActiveMatches:
    handler: src/handlers/matches.get_active_matches
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches/active
          method: get
          authorizer:
            name: authHandler

  createMatch:
    handler: src/handlers/matches.create_match
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches
          method: post
          authorizer:
            name: authHandler

  startMatch:
    handler: src/handlers/matches.start_match
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches/{matchId}/start
          method: post
          authorizer:
            name: authHandler

  # Queue関連のエンドポイント
  getQueueStatus:
    handler: src/handlers/queue.get_queue_status
    memorySize: 256
    timeout: 10
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/queue
          method: get
          authorizer:
            name: authHandler

  joinQueue:
    handler: src/handlers/queue.join_queue
    memorySize: 512
    timeout: 15
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /api/queue/join
          method: post
          authorizer:
            name: authHandler

  leaveQueue:
    handler: src/handlers/queue.leave_queue
    memorySize: 512
    timeout: 15
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /api/queue/leave
          method: post
          authorizer:
            name: authHandler

  getMyQueueStatus:
    handler: src/handlers/queue.get_my_queue_status
    memorySize: 256
    timeout: 10
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/queue/me
          method: get
          authorizer:
            name: authHandler

  # 統合マッチ処理（結果集計 + ランキング計算 + マッチメイキング、2分間隔）
  processMatchmaking:
    handler: src/handlers/matchmaking.match_make
    memorySize: 1024
    timeout: 30
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
      RANKINGS_TABLE_NAME: ${self:custom.tableName.rankings}
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
      DISCORD_WEBHOOK_URL: ${env:DISCORD_WEBHOOK_URL, 'https://discord.com/api/webhooks/1185019044391305226/NbOT6mnrZNHS61T5ro7iu2smxyhhSPH_tecLnWmZ91kup96-mtpdcGwvvo3kjmyzR96_'}
    events:
      # 平日午前（JST 00:00-04:00 = UTC 15:00-18:00 前日）
      - schedule:
          name: ${sls:stage}-${self:service}-weekday-morning
          description: "Weekday morning match processing (JST 00:00-04:00)"
          rate: cron(0/2 15-18 ? * SUN,MON,TUE,WED,THU *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled, true}
      # 平日午後（JST 14:00-23:59 = UTC 05:00-14:59）
      - schedule:
          name: ${sls:stage}-${self:service}-weekday-afternoon
          description: "Weekday afternoon match processing (JST 14:00-23:59)"
          rate: cron(0/2 5-14 ? * MON,TUE,WED,THU *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled, true}
      # 金曜日午後〜土曜日早朝（JST 14:00-翌08:59 = UTC 05:00-23:59）
      - schedule:
          name: ${sls:stage}-${self:service}-friday
          description: "Friday match processing (JST 14:00-08:59 next day)"
          rate: cron(0/2 5-23 ? * FRI *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled, true}
      # 土曜日（終日 = UTC 00:00-23:59）
      - schedule:
          name: ${sls:stage}-${self:service}-saturday
          description: "Saturday match processing (all day)"
          rate: cron(0/2 * ? * SAT *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled, true}
      # 日曜日（JST 09:00-翌03:59 = UTC 00:00-18:59）
      - schedule:
          name: ${sls:stage}-${self:service}-sunday
          description: "Sunday match processing (JST 09:00-03:59 next day)"
          rate: cron(0/2 0-18 ? * SUN *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled, true}

      # 月曜が祝日の場合の追加カバレッジ（JST 04:00-14:00 を被りなく分割）
      # 前日（日曜）UTC 19:00-23:59 = 月曜 JST 04:00-08:59
      - schedule:
          name: ${sls:stage}-${self:service}-monday-holiday-early
          description: "Monday holiday coverage (JST 04:00-08:59 = UTC SUN 19:00-23:59)"
          rate: cron(0/2 19-23 ? * SUN *)
          enabled: false
      # 当日（月曜）UTC 00:00-04:59 = 月曜 JST 09:00-13:59
      - schedule:
          name: ${sls:stage}-${self:service}-monday-holiday-late
          description: "Monday holiday coverage (JST 09:00-13:59 = UTC MON 00:00-04:59)"
          rate: cron(0/2 0-4 ? * MON *)
          enabled: false

  # デバッグ用: 手動で試合結果集計を実行するエンドポイント
  # 本番環境では削除すること
  debugGatherMatch:
    handler: src/handlers/match_judge.gather_match
    memorySize: 1024
    timeout: 30
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/debug/gather-match
          method: post
          authorizer:
            name: authHandler

  # デバッグ用: 手動でマッチメイキングを実行するエンドポイント
  # 本番環境では削除すること
  debugTriggerMatchmaking:
    handler: src/handlers/matchmaking.debug_trigger_matchmaking
    memorySize: 1024
    timeout: 30
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
      RANKINGS_TABLE_NAME: ${self:custom.tableName.rankings}
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
      DISCORD_WEBHOOK_URL: ${env:DISCORD_WEBHOOK_URL, 'https://discord.com/api/webhooks/1185019044391305226/NbOT6mnrZNHS61T5ro7iu2smxyhhSPH_tecLnWmZ91kup96-mtpdcGwvvo3kjmyzR96_'}
    events:
      - httpApi:
          path: /api/debug/matchmaking/trigger
          method: post
          authorizer:
            name: authHandler

  # デバッグ用: 手動でキューメタ情報を更新するエンドポイント
  # 本番環境では削除すること
  debugUpdateQueueMeta:
    handler: src/handlers/matchmaking.debug_update_queue_meta
    memorySize: 512
    timeout: 30
    environment:
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/debug/queue/meta/update
          method: post

  getCurrentMatch:
    handler: src/handlers/matches.get_current_match
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
    events:
      - httpApi:
          path: /api/matches/current
          method: get
          authorizer:
            name: authHandler

  reportMatchResult:
    handler: src/handlers/match_report.report_match_result
    memorySize: 1024
    timeout: 25
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /api/matches/{matchId}/report
          method: post
          authorizer:
            name: authHandler

  cancelMatch:
    handler: src/handlers/matches.cancel_match
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches/{matchId}/cancel
          method: post
          authorizer:
            name: authHandler

  addPenaltyPlayer:
    handler: src/handlers/matches.add_penalty_player
    memorySize: 256
    timeout: 10
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/matches/{matchId}/penalty
          method: post
          authorizer:
            name: authHandler

  # ロビーID関連のエンドポイント
  updateLobbyId:
    handler: src/handlers/matches.update_lobby_id
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /api/matches/lobby/update
          method: post
          authorizer:
            name: authHandler

  transferHost:
    handler: src/handlers/matches.transfer_host
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /api/matches/host/transfer
          method: post
          authorizer:
            name: authHandler

  # Record関連のエンドポイント
  getUserRecords:
    handler: src/handlers/records.get_user_records
    memorySize: 256
    timeout: 10
    environment:
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/me/records
          method: get
          authorizer:
            name: authHandler

  getMatchRecords:
    handler: src/handlers/records.get_match_records
    memorySize: 256
    timeout: 10
    environment:
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/matches/{matchId}/records
          method: get
          authorizer:
            name: authHandler

  searchRecords:
    handler: src/handlers/records.search_records
    memorySize: 256
    timeout: 10
    environment:
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/records/search
          method: get
          authorizer:
            name: authHandler

  getUserStats:
    handler: src/handlers/records.get_user_stats
    memorySize: 256
    timeout: 10
    environment:
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/{userId}/stats
          method: get
          authorizer:
            name: authHandler

  getUserRecentPerformance:
    handler: src/handlers/records.get_user_recent_performance
    memorySize: 256
    timeout: 10
    environment:
      RECORDS_TABLE_NAME: ${self:custom.tableName.records}
    events:
      - httpApi:
          path: /api/users/{userId}/recent-performance
          method: get
          authorizer:
            name: authHandler

  # 管理者用API
  adminSearchUsers:
    handler: src/handlers/admin.search_users
    memorySize: 1024
    timeout: 25
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/users/search
          method: post
          authorizer:
            name: authHandler

  adminGetUserDetails:
    handler: src/handlers/admin.get_user_details
    memorySize: 512
    timeout: 15
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/users/{user_id}
          method: get
          authorizer:
            name: authHandler

  adminUpdateUser:
    handler: src/handlers/admin.update_user
    memorySize: 512
    timeout: 15
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/users/{user_id}
          method: put
          authorizer:
            name: authHandler

  adminGetPenaltyStatus:
    handler: src/handlers/admin.get_penalty_status
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/users/{user_id}/penalty
          method: get
          authorizer:
            name: authHandler

  adminApplyPenalty:
    handler: src/handlers/admin.apply_penalty
    memorySize: 256
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/users/{user_id}/penalty
          method: post
          authorizer:
            name: authHandler

  # ランキング計算関数（手動実行のみ - 通常は統合スケジューラーで実行）
  calculateRankings:
    handler: src/handlers/ranking_calculator.calculate_rankings
    memorySize: 1024
    timeout: 25
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      RANKINGS_TABLE_NAME: ${self:custom.tableName.rankings}
    events:
      - httpApi:
          path: /api/debug/ranking/calculate
          method: post
          authorizer:
            name: authHandler

  # WebSocket関連の関数
  wsConnect:
    handler: src/handlers/websocket.on_connect
    memorySize: 256
    timeout: 10
    environment:
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - websocket: $connect

  wsDisconnect:
    handler: src/handlers/websocket.on_disconnect
    memorySize: 256
    timeout: 10
    environment:
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - websocket: $disconnect

  wsDefault:
    handler: src/handlers/websocket.on_message
    memorySize: 512
    timeout: 15
    environment:
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
      QUEUE_TABLE_NAME: ${self:custom.tableName.queue}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - websocket: $default

  # DynamoDB Streams処理 - キュー状態変更の差分検知
  queueStreamProcessor:
    handler: src/handlers/queue_stream.process_queue_changes
    memorySize: 512
    timeout: 15
    environment:
      CONNECTIONS_TABLE_NAME: ${self:custom.tableName.connections}
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      AWS_STAGE: ${sls:stage}
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt QueueTable.StreamArn
          batchSize: 10
          startingPosition: TRIM_HORIZON

  # 管理者用試合管理エンドポイント
  getAdminMatches:
    handler: src/handlers/admin_matches.get_admin_matches
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/matches
          method: get
          authorizer:
            name: authHandler

  getAdminMatchDetail:
    handler: src/handlers/admin_matches.get_admin_match_detail
    memorySize: 512
    timeout: 15
    environment:
      MATCHES_TABLE_NAME: ${self:custom.tableName.matches}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/admin/matches/{matchId}
          method: get
          authorizer:
            name: authHandler

  # Stripe決済関連 - セキュリティ重視の実装
  createCheckoutSession:
    handler: src/handlers/stripe_payment.create_checkout_session
    memorySize: 1024
    timeout: 25
    environment:
      STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY} # 環境変数から安全に取得
      FRONTEND_URL: ${env:FRONTEND_URL}
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/create-checkout-session
          method: post
          authorizer:
            name: authHandler # フロントエンドからのアクセスは認証必須

  stripeWebhook:
    handler: src/handlers/stripe_payment.webhook_handler
    memorySize: 1024
    timeout: 25
    environment:
      STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY} # 環境変数から安全に取得
      STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET} # Webhook署名検証用
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - httpApi:
          path: /api/stripe/webhook
          method: post
          # Webhookには認証不要（Stripe署名で検証）

  # シーズン管理API
  getAllSeasons:
    handler: src/handlers/seasons.get_all_seasons
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons
          method: get
          authorizer:
            name: authHandler

  getSeason:
    handler: src/handlers/seasons.get_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons/{seasonId}
          method: get
          authorizer:
            name: authHandler

  getActiveSeason:
    handler: src/handlers/seasons.get_active_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/seasons/active
          method: get
          # 認証不要 - フロントエンドでシーズン情報表示用

  createSeason:
    handler: src/handlers/seasons.create_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons
          method: post
          authorizer:
            name: authHandler

  updateSeason:
    handler: src/handlers/seasons.update_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons/{seasonId}
          method: put
          authorizer:
            name: authHandler

  deleteSeason:
    handler: src/handlers/seasons.delete_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons/{seasonId}
          method: delete
          authorizer:
            name: authHandler

  activateSeason:
    handler: src/handlers/seasons.activate_season
    memorySize: 256
    timeout: 10
    environment:
      MASTER_DATA_TABLE_NAME: ${self:custom.tableName.masterData}
    events:
      - httpApi:
          path: /api/admin/seasons/{seasonId}/activate
          method: post
          authorizer:
            name: authHandler

  # ===========================================
  # BANPICKシミュレーターツール専用API（認証不要）
  # ※メインアプリとは完全に独立したツール機能※
  # ===========================================

  # BANPICKシミュレーター用ルーム作成
  createPickSimulatorRoom:
    handler: src/handlers/pick_simulator_rooms.create_pick_simulator_room
    memorySize: 256
    timeout: 10
    environment:
      PICK_SIMULATOR_ROOMS_TABLE_NAME: ${self:custom.tableName.pickSimulatorRooms}
    events:
      - httpApi:
          path: /api/tools/banpick/rooms
          method: post
          # ツール用APIのため認証不要

  # BANPICKシミュレーター用ルーム存在確認
  checkPickSimulatorRoom:
    handler: src/handlers/pick_simulator_rooms.check_pick_simulator_room
    memorySize: 256
    timeout: 10
    environment:
      PICK_SIMULATOR_ROOMS_TABLE_NAME: ${self:custom.tableName.pickSimulatorRooms}
    events:
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/check
          method: get
          # ツール用APIのため認証不要

  # BANPICKシミュレーター用ルームデータ取得
  getPickSimulatorRoomData:
    handler: src/handlers/pick_simulator_rooms.get_pick_simulator_room_data
    memorySize: 256
    timeout: 10
    environment:
      PICK_SIMULATOR_ROOMS_TABLE_NAME: ${self:custom.tableName.pickSimulatorRooms}
    events:
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}
          method: get
          # ツール用APIのため認証不要

  # BANPICKシミュレーター用ホストオファー更新
  updatePickSimulatorRoomOffer:
    handler: src/handlers/pick_simulator_rooms.update_pick_simulator_room_offer
    memorySize: 256
    timeout: 10
    environment:
      PICK_SIMULATOR_ROOMS_TABLE_NAME: ${self:custom.tableName.pickSimulatorRooms}
    events:
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/offer
          method: put
          # ツール用APIのため認証不要

  # BANPICKシミュレーター用ゲストアンサー更新
  updatePickSimulatorRoomAnswer:
    handler: src/handlers/pick_simulator_rooms.update_pick_simulator_room_answer
    memorySize: 256
    timeout: 10
    environment:
      PICK_SIMULATOR_ROOMS_TABLE_NAME: ${self:custom.tableName.pickSimulatorRooms}
    events:
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/answer
          method: put
          # ツール用APIのため認証不要

  # BANPICKシミュレーター用CORS対応
  pickSimulatorRoomsOptionsHandler:
    handler: src/handlers/pick_simulator_rooms.pick_simulator_rooms_options_handler
    memorySize: 256
    timeout: 10
    events:
      - httpApi:
          path: /api/tools/banpick/rooms
          method: options
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}
          method: options
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/check
          method: options
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/offer
          method: options
      - httpApi:
          path: /api/tools/banpick/rooms/{room_id}/answer
          method: options

plugins:
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-offline
  - serverless-step-functions
  # - serverless-dynamodb  # Disabled for AWS DynamoDB

custom:
  stage: ${sls:stage, 'dev'}
  frontendUrls:
    dev: https://unitemate-v2-git-dev-rikarazomes-projects.vercel.app
    prod: https://unitemate-v2-iota.vercel.app
  tableName:
    users: ${self:service}-users-${sls:stage}
    matches: ${self:service}-matches-${sls:stage}
    records: ${self:service}-records-${sls:stage}
    queue: ${self:service}-queue-${sls:stage}
    masterData: ${self:service}-master-data-${sls:stage}
    connections: ${self:service}-connections-${sls:stage}
    rankings: ${self:service}-rankings-${sls:stage}
    pickSimulatorRooms: ${self:service}-pick-simulator-rooms-${sls:stage} # BANPICKシミュレーター専用
  cache:
    prd:
      schedule_enabled: true
    prod:
      schedule_enabled: true
    dev:
      schedule_enabled: false
  prune:
    automatic: true
    number: 3
  pythonRequirements:
    dockerizePip: true
    pipCmdExtraArgs:
      - --no-cache-dir
    fileName: requirements.txt
  serverless-offline:
    httpPort: 3000
    useChildProcesses: false
    noPrependStageInUrl: true
    environment:
      IS_OFFLINE: true
  # serverless-dynamodb:  # Disabled for AWS DynamoDB
  #   stages:
  #     - dev
  #   start:
  #     port: 8000
  #     inMemory: true
  #     heapInitial: 200m
  #     heapMax: 1g
  #     migrate: true
  #     seed: true
  #     convertEmptyValues: true
  #   seed:
  #     domain:
  #       sources:
  #         - table: ${self:custom.tableName.users}
  #           sources: [./migrations/users-seed.json]
  #         - table: ${self:custom.tableName.masterData}
  #           sources: [./migrations/master-data-seed.json]

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.users}
        AttributeDefinitions:
          - AttributeName: namespace # Partition Key (Legacy準拠)
            AttributeType: S
          - AttributeName: user_id # Sort Key (Discord ID)
            AttributeType: S
          - AttributeName: rate # LSI Sort Key
            AttributeType: N
          - AttributeName: auth0_sub # GSI Partition Key
            AttributeType: S
          # GSI用の属性定義（GSIと一緒に追加する）
          # - AttributeName: trainer_name # GSI Partition Key for search
          #   AttributeType: S
          - AttributeName: discord_username # GSI Partition Key for search
            AttributeType: S
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: rate_index # Legacy準拠
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: rate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: Auth0SubIndex
            KeySchema:
              - AttributeName: auth0_sub
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          # GSI追加は一度に一つずつ行う必要があるため、一時的にコメントアウト
          # - IndexName: TrainerNameIndex
          #   KeySchema:
          #     - AttributeName: trainer_name
          #       KeyType: HASH
          #   Projection:
          #     ProjectionType: ALL
          - IndexName: DiscordUsernameIndex
            KeySchema:
              - AttributeName: discord_username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MatchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.matches}
        AttributeDefinitions:
          - AttributeName: namespace # Partition Key (Legacy YML準拠)
            AttributeType: S
          - AttributeName: match_id # Sort Key (Legacy YML準拠、数値)
            AttributeType: N
          - AttributeName: status # LSI Sort Key
            AttributeType: S
          - AttributeName: matched_unixtime # LSI Sort Key
            AttributeType: N
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: status_index # Legacy YML準拠
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: match_time_index # Legacy YML準拠
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: matched_unixtime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    RecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.records}
        AttributeDefinitions:
          - AttributeName: user_id # Partition Key (Legacy準拠)
            AttributeType: S
          - AttributeName: match_id # Sort Key (Legacy準拠)
            AttributeType: N
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    QueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.queue}
        AttributeDefinitions:
          - AttributeName: namespace # Partition Key (Legacy準拠)
            AttributeType: S
          - AttributeName: user_id # Sort Key (Legacy準拠)
            AttributeType: S
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    MasterDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.masterData}
        AttributeDefinitions:
          - AttributeName: data_type # Partition Key (POKEMON, BADGE, ROLE, SEASON)
            AttributeType: S
          - AttributeName: id # Sort Key
            AttributeType: S
        KeySchema:
          - AttributeName: data_type
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.connections}
        AttributeDefinitions:
          - AttributeName: connection_id # Partition Key
            AttributeType: S
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RankingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.rankings}
        AttributeDefinitions:
          - AttributeName: ranking_type # Partition Key (e.g., "rate", "winrate")
            AttributeType: S
          - AttributeName: rank # Sort Key
            AttributeType: N
        KeySchema:
          - AttributeName: ranking_type
            KeyType: HASH
          - AttributeName: rank
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # BANPICKシミュレーター専用テーブル（メインアプリとは完全分離）
    PickSimulatorRoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.pickSimulatorRooms}
        AttributeDefinitions:
          - AttributeName: room_id # Partition Key
            AttributeType: S
        KeySchema:
          - AttributeName: room_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true # 1時間後に自動削除

    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websockets-${sls:stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action
